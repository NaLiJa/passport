;-------------------------------
; #555
; RWTS reads 5 sectors from
; three consecutive half-tracks
;
; module by qkumba
;
; tested on
; - Addition Magician
; - Adventure Double Feature Vol. II
; - Agent USA
; - Bumble Games v1.3
; - Bumble Games v1.4
; - Bumble Plot v1.1
; - Con-Putation
; - Cosmic Combat
; - Crosscountry Rallye
; - Crush, Crumble and Chomp v1981-06-22
; - Game of the U.S.
; - Gertrude's Puzzles v1.0
; - Gertrude's Secrets v1.0
; - Guardian
; - Jumble Jet
; - Jumpman
; - Microzine 3
; - Microzine 4
; - Microzine 5
; - Microzine 6
; - Moptown Parade v1.0
; - Number Stumper
; - Reader Rabbit v1.0
; - Rocky's Boots v1.0
; - Tales of Discovery
; - Temple of Apshai
; - Trap-a-Zoid
;-------------------------------
!zone {
         jmp   .exit2     ; reachable only via inspect

Do555
         ; find entrypoint for second stage

         lda   #8
         ldy   #3
         jsr   SearchSector
         !byte $A9,WILDCARD ; LDA #$xx
         !byte $48          ; PHA
         lda   $801,x
         bcc   .setpage
         lda   #8
         ldy   #4
         jsr   SearchSector
         !byte $45,WILDCARD ; EOR $xx
         !byte $91,$26      ; STA ($26),y
         lda   #4
         bcc   .setenc
         tay
         asl
         jsr   SearchSector
         !byte $45,WILDCARD ; EOR $xx
         !byte $99,$00      ; STA $xxxx,y
         bcs   .jmpexit
         lda   $804,x

.setenc
         sec

.setpage
         sta   .patch+1
         bcs   .findkey
         txa
         tay
         iny
         iny
         iny
         jsr   search
         ldy   $801,x
         iny
         lda   #0
         bcc   .setPC
.jmpexit
         jmp   FatalError

.findkey
         lda   #8
         ldy   #3
         jsr   SearchSector
         !byte $A0,WILDCARD ; LDY #$xx
         !byte $A2          ; LDX #$xx
         bcs   .jmpexit
         lda   $803,x
         ldy   #0

.setPC
         sta   .xorkey+1
         sty   .initPC+1

.loopsect
         inc   gSector
         jsr   ReadSector
         bcs   .jmpexit
         jsr   .decode

.initPC
         ; skip lightly variable init

         ldx   #0         ; SMC
         lda   $800,x
         cmp   #$46
         bne   .nolsr
         inx
         inx

.nolsr
         lda   $800,x
         cmp   #$A0       ; LDY #$xx
         bne   .noldy
         inx
         inx
         lda   $800,x
         cmp   #$98       ; TYA
         bne   .isldy
         inx

.isldy
         lda   #8
         ldy   #6
         jsr   CompareMemory
	 !byte $99,$02,$08 ; STA $802,y
	 !byte $88         ; DEY
         !byte $D0,$FA     ; BNE *-4
         bcs   .loopsect
         inx
         inx
         inx

.skipjsr
         inx
         inx
         inx

.noldy
         lda   $800,x
         cmp   #$A9       ; LDA #$xx
         bne   .nolda
         inx
         inx

.nolda
         lda   $800,x
         cmp   #$20       ; JSR $xxxx
         bne   .loopsect
         lda   $802,x
         eor   .patch+1
         bne   .skipjsr
         sta   .curtrk+1

         ;search for seek routine
         ;in highly variable main
         ;so we can count calls to whole-track seek
         ; static boot tracer!

         ldy   $801,x
         lda   $801,y
         tay
         lda   $800,y
         cmp   #$48       ; PHA
         beq   .foundseek
         lda   $801,y
         tay
         lda   $800,y
         cmp   #$48       ; PHA
         beq   .foundseek2
         inc   .curtrk+1
         lda   $801,y
         tay
         lda   $800,y
         cmp   #$48       ; PHA
         beq   .foundseek

.jmpexit2
         jmp   FatalError

.foundseek2
         stx   $3A
         lda   $801,x
         tax
         lda   $803,x
         cmp   #$A2       ; LDX #$xx
         bne   .foundseek
         ldx   $3A

.foundseek
         dey
         dey
         sty   .hookseek+1
         dey
         sty   .patch
         inc   .curtrk+1

         lda   #8
         sta   $3B
         inx
         inx
         inx

.walkcode
         stx   $3A
         ldy   #0
         lda   ($3A),y
         cmp   #$AA       ; TAX
         beq   .isldx
         cmp   #$A2       ; LDX #$xx
         bne   .tryseek
         iny
.isldx
         iny
         lda   ($3A),y
         cmp   #$20       ; JSR $xxxx
         bne   .sizeinst
         iny
.skipjsr2
         iny
.skipjsr1
         tya
         bne   .skipinst  ; always

.tryseek
         cmp   #$20       ; JSR $xxxx
         bne   .trylda
         iny
         iny
         lda   ($3A),y
         cmp   .patch+1
         bne   .skipjsr1
         dey
         lda   ($3A),y
         tax
         cmp   .patch
         beq   .inctrack
         bcs   .walkcode
         lda   $800,x
         cmp   #$20       ; JSR
         bne   .skipjsr2
         lda   $801,x
         cmp   .patch
         bne   .skipjsr2

.inctrack
         inc   .curtrk+1
         bne   .skipjsr2  ; always

.trylda
         ldx   $3A
         lda   $800,x
         cmp   #$66       ; ROR $xx
         bne   .sizeinst
         lda   #$A9       ; LDA #$xx
         inx
         inx
         cmp   $800,x
         beq   .foundpart
         inc   .curtrk+1
         inx
         inx
         inx
         cmp   $800,x
         beq   .foundpart

.sizeinst
         ldy   #0
         lda   ($3A),y
         jsr   $F88E      ; INSDS2
         lda   $2F
.skipinst
         sec
         adc   $3A
         tax
         bcc   .walkcode
         jmp   FatalError

         ; success!
         ; found where the partial tracks start
         ; read whole tracks to this point
         ; then the partial tracks
         ; and then the rest of the disk

.foundpart
         stx   $3A
         jsr   IncProgress
         lda   #BASEPAGE
         sta   gAddress+1
         lda   gSector
         sta   .cmpsect+1

.copytracks
         ldx   #0
         stx   gSector
         ldy   #$10
         jsr   .readwrite
         lda   gTrack
         cmp   #1
         bne   .curtrk
         ldx   #$90
         stx   $BDF2
.curtrk
         cmp   #00        ; SMC
         bne   .notpartial
         ldy   #$CD
         sty   $BE2B
         ldx   #1
         ldy   #6
         jsr   .readsectors
         sec
         rol   gTrack
         dec   dct+1      ; half-track stepping!
         ldx   #6
         ldy   #11
         jsr   .readsectors
         jsr   IncProgress
         inc   gTrack
         lsr   gTrack
         inc   dct+1      ; back to normal
         ldx   #11
         ldy   #16
         jsr   .readsectors
         jsr   ReorderLogicalToPhysical
         dec   gTrack
         jsr   .writesectors
         inc   gTrack
         ldy   #$B9
         sty   $BE2B

.notpartial
         lda   gTrack
         cmp   #$23
         bcc   .copytracks
         jsr   IncProgress
         jsr   .cleanup
         jmp   .exit

.cancel
         jsr   .cleanup
         jmp   Cancel

.readwrite
         jsr   .readsectors

.writesectors
         jsr   WriteTrackNA
         jsr   IncProgress
         lda   KEY
         bmi   .cancel
         ldx   gTrack
         inx
         txa
         jmp   ChangeTrackNW

.maybefatal
         ldx   $BDF2
         jsr   .cleanup
         lda   $478
         sta   $47E       ; restore track number replaced by DOS
         cpx   #$F0
         bne   .retryread
         lda   gError
         cmp   #$40       ; sector not found
         bne   .reallyfatal
         rts

.reallyfatal
         jmp   FatalError

.readsectors
         sty   .endsector+1
.readsector
         txa
         jsr   ChangeSector
.retryread
         jsr   ReadSector
         bcs   .maybefatal
         lda   gTrack
         bne   .notpatch2
         lda   gSector
.cmpsect
         eor   #$00       ; SMC
         bne   .notpatch2
         jsr   .decode

.hookseek
         ldy   #00        ; SMC
         lda   $3A
         adc   #$0E
         sta   ($3E),y
         sbc   #3
         tax
         lda   $3F
         sbc   #BASEPAGE
         ldy   #8
         jsr   modify
.patch
         !byte $00,$04     ; [JSR] $04xx
         !byte $B0,$0B     ; BCS *+$0D
         !byte $E6,$41     ; STA $41
         !byte $EA         ; NOP
         !byte $4C         ; JMP $xxxx
         sec
         txa
         sbc   #5
         tay
         lda   #$0F
         sta   ($3E),y
         tya
         sbc   #9
         tay
         lda   ($3E),y
         cmp   #$41
         bne   .notpatch1
         lda   #$EA
         sta   ($3E),y

.notpatch1
         jsr   .decode

.notpatch2
         ldx   gSector
         inx
.endsector
         cpx   #00        ; SMC
         bne   .readsector
         ldy   #12
         jsr   SearchTrack
         !byte $C9,$FF     ; CMP #$FF
         !byte $D0,$0A     ; BNE *+$0C
         !byte $EA         ; NOP
         !byte $BD,$8C,$C0 ; LDA $C08C,X
         !byte $10,$FB     ; BPL *-3
         !byte $C9,$FF     ; CMP #$FF
         bcc   .patchepi
         ldy   #9
         jsr   SearchTrack
         !byte $AC,$9F,$05 ; LDY $059F
         !byte $C8         ; INY
         !byte $C8         ; INY
         !byte $98         ; TYA
         !byte $20,$19,$05 ; JSR $0519
         bcc   .patchrocky
         rts

.patchepi
         inx
         pha
         jsr   modify1
         !byte $DE
         txa
         clc
         adc   #10
         tax
         pla
         pha
         jsr   modify1
         !byte $AA
         txa
         clc
         adc   #$52
         tax
         pla
         pha
         jsr   modify1
         !byte $DE
         txa
         clc
         adc   #10
         tax
         pla
         jsr   modify1
         !byte $AA
         ldy   #8
         jsr   SearchTrack
         !byte $A9,$20 ; LDA #$20
         !byte $D0,$E1 ; BNE *-$1D
         !byte $A0,$05 ; LDY #$05
         !byte $B1,$48 ; LDA ($48),Y
         bcs   .novol
         inx
         inx
         inx
         jsr   modify1
         !byte $00
.novol
         rts

.patchrocky
         ldy   #8
         pha
         jsr   modify
         !byte $E6,$41     ; INC $41
         !byte $A5,$41     ; LDA $41
         !byte $20,$18,$05 ; JSR $0518
         !byte $A9         ; LDA #$xx
         clc
         txa
         adc   #$38
         tax
         pla
         pha
         jsr   modify1
         !byte $08
         clc
         txa
         adc   #$4A
         tax
         pla
         pha
         ldy   #4
         jsr   modify
         !byte $85,$41     ; STA $41
         !byte $D0,$08     ; BNE *+$0A
         clc
         txa
         adc   #$0C
         tax
         pla
         pha
         ldy   #3
         jsr   modify
         !byte $4C,$18,$05 ; JMP $0518
         clc
         txa
         adc   #$7B
         tax
         pla
         adc   #$FE
         pha
         jsr   modify1
         !byte $8D
         clc
         txa
         adc   #$3B
         tax
         pla
         pha
         jsr   modify1
         !byte $8D
         clc
         txa
         adc   #$21
         tax
         pla
         pha
         jsr   modify1
         !byte $8D
         clc
         txa
         adc   #$22
         tax
         pla
         pha
         jsr   modify1
         !byte $8D
         clc
         txa
         adc   #$1C
         tax
         pla
         pha
         jsr   modify1
         !byte $8D
         clc
         txa
         adc   #$38
         tax
         pla
         pha
         jsr   modify1
         !byte $8D
         clc
         txa
         adc   #$2E
         tax
         pla
         adc   #$FE
         jsr   modify1
         !byte $8D
         rts

.decode
         ldy   #0
-        lda   ($3E),y
.xorkey
         eor   #$D1       ; SMC
         sta   ($3E),y
         iny
         bne   -
         rts

.cleanup
         lda   #1
         sta   dct+1
         lda   #$F0
         sta   $BDF2
         lda   #$B9
         sta   $BE2B
         rts

.exit
         jmp   Pass

.exit2
}
