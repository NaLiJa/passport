;-------------------------------
; TraceDOS33
; set up 1st-level boot trace on
; a DOS 3.3-shaped bootloader
;-------------------------------
!zone {
TraceDOS33
         jsr   PreCheckT00
;
; pre-check passed, do the trace
;
         lda   #<TraceDOS33b
         ldx   #>TraceDOS33b
         jmp   Trace

precheck_sectors
         ; This list is (re)initialized in IDBootloader,
         ; then potentially altered in IDDOS33.
         ; Values are logical sector numbers.
         ; There are always 16 (0x10) values in this list.
         ; Negative values are ignored.
         ; Positive values are treated as logical
         ; sector numbers and read from track $00.
         ; Sectors are read in the order listed here.
         !byte $09,$08,$07,$06,$05,$04,$03,$02,$01
         !byte $00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8

;-------------------------------
; TraceDOS33b
; set up 2nd boot trace at $084A
;-------------------------------
TraceDOS33b
         lda   #$4C
         sta   $084A
         lda   #<TraceDOS33c
         sta   $084B
         lda   #>TraceDOS33c
         sta   $084C
         lda   #$EA
         ldy   #9
.noppatch
         sta   $83E,Y     ; disable calls to
         dey              ; TEXt/PR0/IN0
         bne   .noppatch  ; including "Grafboot"
         jmp   $0801

TraceDOS33c
         lda   $08FE      ; 2nd-level trace callback is here
         sta   .x6+1
         sta   .x6b+1
         sta   .x6c+2
         clc
         adc   #$02
_Inspect1a
         sta   .x1+1
         sta   .x2+1
         sta   .x7+1
         sta   b4bbmodify+2
         sta   b4bbmodify2+2
         clc
         adc   #$06
         sta   b4bbcompare+1
         tax
         dex
         stx   .x5+1
         dex
         stx   .x3+1
         stx   .x4+1
         stx   .x8+2
         stx   .x9+2
         stx   jCallRWTS+2
         jsr   ProtectedDOS ; check for a specific (encrypted)
                          ; bootloader called "Protected DOS"
         bcs   .notprotdos
         jmp   ADStyle
.notprotdos
         jsr   PanglosDOS ; check for a specific bootloader
                              ; that uses per-file sector encoding
         bcs   .notpanglosdos
         jmp   ADStyle
.notpanglosdos
         lda   jCallRWTS+2
         ldx   #$00       ; check for "STY $48;STA $49"
         ldy   #$04       ; at RWTS entry point
         jsr   CompareMemory ; (e.g. $BD00 or $3D00)
         !byte $84,$48,$85,$49
         bcc   .x1
         jmp   UseUniversal
.x1      lda   #$B9       ; check for "SEC;RTS" at $B942
         ldx   #$42
         ldy   #$02
         jsr   CompareMemory
         !byte $38,$60
         bcc   .x2
         jmp   UseUniversal
.x2      lda   #$B9       ; check for "LDA $C08C,X" at $B94F
         ldx   #$4F
         ldy   #$03
         jsr   CompareMemory
         !byte $BD,$8C,$C0
         bcc   .x3
         jmp   UseUniversal
.x3      lda   #$BD       ; check for "JSR $xx00" at $BDB9
         ldx   #$B9
         ldy   #$02
         jsr   CompareMemory
         !byte $20,00
         bcc   .x5
;
; Check for RWTS variant that has extra code before
; JSR $B800 e.g. Verb Viper (DLM), Advanced Analogies (Hartley)
;
.x4      lda   #$BD       ; check for "JSR $xx00" at $BDC5
         ldx   #$C5
         ldy   #$02
         jsr   CompareMemory
         !byte $20,00
         bcc   .x5        ; passport-test-suite/Analogies Tutorial.woz [C=0] matches
         jmp   UseUniversal ; give up tracing; this RWTS is unsupported
;
; Check for RWTS variant that uses non-standard address for slot
; LDX $1FE8 e.g. Pinball Construction Set (1983)
; we don't like that one
;
.x5      lda   #$BE       ; check for "LDX $1FE8" at $BE43
         ldx   #$43
         ldy   #$03
         jsr   CompareMemory
         !byte $AE,$E8,$1F
         bcs   .x6        ; passport-test-suite/Pinball Construction Set (Budgeco).woz [C=0] matches
         jmp   UseUniversal ; give up tracing; this RWTS is unsupported
;
; Check for Milliken protection routine in late-stage boot
; (affects readable/ignoreable sector map, so must ID now)
;
.x6      lda   #$B7       ; check for "JMP $9B03" at $B747
         ldx   #$47
         ldy   #$03
         jsr   CompareMemory
         !byte $4C,$03,$9B
         bcs   .x6b       ; passport-test-suite/Tangram Puzzler.woz [C=0] matches
         jsr   IDMilliken
         bcs   .x6b
         lda   #$0A
         sta   gDisplayBytes
         lda   #s_milliken
         jsr   PrintByID
         lda   #kSectorOptional
         sta   T02S05
;
; Try to initialize the "current track" variable like the bootloader would --
; required for some disks that use a strange location for this variable
; e.g. Super Taxman II
;
.x6b     lda   #$B7       ; check for "LDA #$00 / STA $....,X / STA $....,X / JSR $..93" at $B730
         ldx   #$30
         ldy   #$0A
         jsr   CompareMemory
         !byte $A9,$00
         !byte $9D,WILDCARD,WILDCARD
         !byte $9D,WILDCARD,WILDCARD
         !byte $20,$93
         bcs   .x7        ; passport-test-suite/Super Taxman II.woz [C=0] matches
         ldy   #$07
.x6c     lda   $B730,y
         sta   .trackpointer,y
         dey
         bpl   .x6c
         ldx   #$06
.trackpointer
         LDA   #$00
         STA   $04F8,X
         STA   $0478,X
;
; Check for Adventure International RWTS (sets flag for patcher)
;
.x7      lda   #$B9       ; check for code at $B936
         ldx   #$36
         ldy   #$0A
         jsr   CompareMemory
         !byte $EA,$EA,$EA; NOP/NOP/NOP
         !byte $BD,$8C,$C0; LDA $C08C,X
         !byte $10,$FB    ; BPL -$FB
         !byte $C9,$00    ; CMP #$00
         bcs   +          ; passport-test-suite/S.A.G.A. 6.woz [C=0] matches
         lda   #TRUE
         sta   gAdventureInternational
;
; Check for Phoenix bootloader/RWTS
; (implies possible secondary protection elsewhere)
;
+        jsr   IDPhoenix
         bcs   +
         lda   #TRUE
         sta   gIsPhoenix
;
; Check for MECC DOS loaded in lower memory
; (sets flag for a specific patcher)
;
+        lda   $08FE
         cmp   #$36
         bne   +
         lda   $371A
         cmp   #$0D
         bne   +
         lda   #TRUE
         sta   gPossibleMECCSwapper
;
; Check for unusual init at $BFC8
; (sets flag for a specific patcher
;  and marks a certain sector optional)
;
+        lda   $08FE
         cmp   #$B7
         bne   +
         lda   $BFCC
         cmp   #$10
         bne   +
         lda   #TRUE
         sta   gPossibleWoodbury
         lda   #kSectorOptional
         sta   T14S06
;
; Turn off drive recalibration
;
+        lda   jCallRWTS+2; check for code at $BDD2
         ldx   #$D2
         ldy   #$06
         jsr   CompareMemory
         !byte $A9,$60    ; LDA #$60
         !byte $20,$95,$BE; JSR $BE95
         !byte $CE        ; DEC $xxxx
         bcs   +
         lda   #$B0
.x8      sta   $BDD2
         lda   #$30
.x9      sta   $BDD3
;
; Check for Infocom disk (need to massage RWTS a little)
;
+        lda   $08FE
         cmp   #$23
         bne   +          ; passport-test-suite/Planetfall r26.woz [Z=1] matches
         lda   #$AD       ; allow $AD..$FF for third data prologue nibble
         sta   $24FC
         lda   #$90
         sta   $24FD
         ldy   #$0F       ; copy sector order map from boot0 into RWTS
-        lda   $084D,y
         sta   $2BB8,y
         dey
         bpl   -
;
; Check for Micro Fun RWTS swapper (called from outside RWTS so
; we need to call it ourselves)
+        ldx   jCallRWTS+2
         dex
         txa
         ldx   #$61
         ldy   #$0B
         jsr   CompareMemory
         !byte $A9,$01
         !byte $8D,$00,$B9
         !byte $A9,$B5
         !byte $8D,$FC,$B8
         !byte $60
         bcs   +          ; passport-test-suite/Crown of Arthain.woz [C=0] matches
         jsr   $BC61
;
; Check for alternate RWTS entry point (e.g. Swordthrust)
;
+        lda   jCallRWTS+2
         sec
         sbc   #$06
         ldx   #$75
         ldy   #(@end_swordthrust-@begin_swordthrust)
         jsr   CompareMemory
@begin_swordthrust
         PHP
         SEI
         PHA
         LDX   $B7EC
         LDA   $BED0,X
         EOR   $B942
         STA   $B8FC
         STA   $B85D
         PLA
         JSR   $BD00
@end_swordthrust
         bcs   +          ; passport-test-suite/Swordthrust 1.woz [C=0] matches
         stx   jCallRWTS+1; set new RWTS entry point to $B775
         lda   #$B7
         sta   jCallRWTS+2
         lda   #<gTrack   ; this entry point assumes track number is in $B7EC
         sta   $B779      ; which isn't true, so change the code to look at
         lda   #>gTrack   ; Passport's gTrack instead
         sta   $B77A
;
; good to go
;
+        jmp   ADStyle    ; use this RWTS to read the disk
}
