;-------------------------------
; IDDOS33
; identify DOS 3.3 bootloader or some variation
; that can be safely boot traced
;
; in:  $0800..$08FF contains T00,S00
;      first page of track buffer also contains T00,S00
; out: C clear if traceable DOS 3.3-style bootloader found
;      C set otherwise
;      all registers clobbered
;      all other flags clobbered
;-------------------------------
!zone {
IDDOS33
;
; $08FE must be either $B6 (standard) or $20..$36
; ($36 is a master DOS that relocates itself later.
; Others like $22 are used by early Infocom games.)
; Must weed out some Infocom and TLC disks that would
; load over program space and crash.
;
         lda   $08FE
         cmp   #$B6
         beq   ++         ; passport-test-suite/Binomial Multiplication.woz [Z=1] here, loads at $B600
         cmp   #$37
         bcc   +          ; passport-test-suite/Beach-Head.woz [C=0] here, loads at $3F00
-        sec
         rts
+        cmp   #$20
         bcc   -          ; passport-test-suite/Alf.woz [C=0] here, loads at $1300
;
; Code at $0801 must be standard (with one exception)
;
++       lda   #$00
         tax
         ldy   #$3F
         jsr   compare    ; if T00,S00,$00 ==
         !byte $01
         !byte $A5,$27
         !byte $C9,$09
         !byte $D0,$18
         !byte $A5,$2B
         !byte $4A
         !byte $4A
         !byte $4A
         !byte $4A
         !byte $09,$C0
         !byte $85,$3F
         !byte $A9,$5C
         !byte $85,$3E
         !byte $18
         !byte $AD,$FE,$08
         !byte $6D,$FF,$08
         !byte WILDCARD   ; will check these later
         !byte WILDCARD
         !byte WILDCARD
         !byte $AE,$FF,$08
         !byte $30,$15
         !byte $BD,$4D,$08
         !byte $85,$3D
         !byte $CE,$FF,$08
         !byte $AD,$FE,$08
         !byte $85,$27
         !byte $CE,$FE,$08
         !byte $A6,$2B
         !byte $6C,$3E,$00
         !byte $EE,$FE,$08
         !byte $EE,$FE,$08
         bcc   +          ; passport-test-suite/Binomial Multiplication.woz [C=0] matches
         jmp   .exit
+
;
; DOS 3.3 has JSR $FE89 / JSR $FE93 / JSR $FB2F
;
         lda   #$00
         ldx   #$3F
         ldy   #$0B
         jsr   compare    ; if T00,S00,$3F ==
         !byte $20,$89,$FE
         !byte $20,$93,$FE
         !byte $20,$2F,$FB
         !byte $A6,$2B
         bcc   +          ; passport-test-suite/Binomial Multiplication.woz [C=0] matches
;
; some Sierra have STA $C050 / STA $C057 / STA $C055 instead
;
         lda   #$00
         ldx   #$3F
         ldy   #$0B
         jsr   compare    ; if T00,S00,$3F ==
         !byte $8D,$50,$C0
         !byte $8D,$57,$C0
         !byte $8D,$55,$C0
         !byte $A6,$2B
         bcs   .exit
+

;
; Check sector order map
;
         lda   #$00       ; passport-test-suite/Leisure Suit Larry.woz [C=0] matches previous compare
         ldx   #$4D
         ldy   #$10
         jsr   compare    ; if T00,S00,$4D ==
         !byte $00,$0D,$0B,$09,$07,$05,$03,$01
         !byte WILDCARD,$0C,$0A,$08,$06,$04,$02,$0F
         bcs   .exit      ; passport-test-suite/Pitfall II.woz [C=1] because of non-standard sector map

;
; Check for MUSE sector order map
;
         lda   #$00
         ldx   #$55
         ldy   #$01
         jsr   compare    ; if T00,S00,$55 ==
         !byte $02
         bcs   +
         lda   #TRUE      ; passport-test-suite/The Function Game.woz [C=0] matches previous compare
         sta   gIsMUSERWTS
         lda   #$0E
         sta   precheck_sectors+1
         lda   #kSectorIgnore
         sta   T00S08
         sta   T00S0F
+
;
; Minor variant jumps to $08F0 and back but is still safe to trace.
; Check for this jump and match the code at $08F0 exactly.
;
         lda   #$00
         ldx   #$1C
         ldy   #$03
         jsr   compare    ; if T00,S00,$1C ==
         !byte $8D,$FE,$08
                          ; standard code at $081C -> success
         bcc   .exit      ; passport-test-suite/Binomial Multiplication.woz [C=0] matches

         lda   #$00
         ldx   #$1C
         ldy   #$03
         jsr   compare    ; if T00,S00,$1C ==
         !byte $4C,$F0,$08; JMP $08F0
         bcs   .exit      ; unknown code at $081C -> failure

         lda   #$00
         ldx   #$F0
         ldy   #$09
         jsr   compare    ; if T00,S00,$F0 ==
         !byte $8D,$FE,$08
         !byte $EE,$F3,$03
         !byte $4C,$1F,$08
                          ; unknown code at $08F0 -> failure
.exit
         rts              ; passport-test-suite/Library Magic.woz [C=0] matches acceptable code at $08F0
}
