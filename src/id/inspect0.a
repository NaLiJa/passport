;-------------------------------
; IDBootloader
; main entry point to identify the bootloader
; and exit via the appropriate tracer/copier
;
; in:    T00,S00 in memory at $0800
;-------------------------------
!zone {
IDBootloader
;
; Reset all per-disk globals.
; These are used as filters later so irrelevant patchers can be skipped.
;
         ldx   #(LASTFILTER-FIRSTFILTER)
         lda   #FALSE
-        sta   FIRSTFILTER-1,x
         dex
         bne   -
         stx   gMECCFastloadType
         stx   gLastTrack
         ldx   #$0F
         ldy   #$F8
-        tya
         sta   precheck_sectors,x
         iny
         dex
         bpl   -

         lda   gIsInfocom18
         bne   .check13
         lda   #s_infocom18
         jsr   PrintByID
         jmp   UseUniversal

.check13
         lda   gIs13Sector
         bne   .sanity
         lda   #s_13sector
         jsr   PrintByID
         jmp   UseUniversal

.sanity
;
; Quick sanity check -- only recognized values for $0800
; are 1 or 2 for regular disks, and 5 for possible Electronic Arts.
;
         lda   $0800
         beq   +
         cmp   #$03
         bcc   .sane
         cmp   #$05
         beq   .sane
+        jmp   UseUniversal

.sane
;
; Copy the boot sector from $0800 to the track/sector buffer
; so we can reuse our standard compare functions.
;
         lda   #$08
         ldx   #BASEPAGE
         ldy   #$01
         jsr   CopyMemory
;
; Try to identify DOS 3.3-shaped bootloader.
; Exit via custom trace function if found.
;
         jsr   IDDOS33
         bcs   .notdos33
         lda   #TRUE
         sta   gIsBoot0
         jsr   IDD5D5F7
         bcs   +
         lda   #TRUE
         sta   gPossibleD5D5F7
+        jsr   IDDiversi
         bcc   .diversi
         jsr   IDPronto
         bcc   .pronto
         lda   #s_dosb0
         !byte $2c
.diversi
         lda   #s_diversidos
         !byte $2c
.pronto
         lda   #s_prontodos
         jsr   PrintByID
         jmp   TraceDOS33
;
; Try to identify a variant bootloader that calls to $08B3
; early to munge the nibble tables used by the drive firmware.
; Exit via custom trace function if found.
;
.notdos33
         jsr   ID8b3
         bcs   +
         lda   #s_jsr8b3
         jsr   PrintByID
         lda   #TRUE
         sta   gIs8b3
         jmp   Trace8B3
;
; Try to identify all the different MECC fastloader variants.
; Exit via custom trace function if found.
;
+        jsr   IDMECC
         bcs   .notmecc
         lda   #ID_MECC_UNK
         sta   gMECCFastloadType
         lda   #s_mecc
         jsr   PrintByID
         jsr   PrereadT00
         bcs   .notmecc
         jsr   IDMECC1
         bcs   +
         lda   #ID_MECC1
         sta   gMECCFastloadType
         jmp   foundmecc1
+        jsr   IDMECC2
         bcs   +
         lda   #ID_MECC2
         sta   gMECCFastloadType
         jmp   foundmecc2
+        jsr   IDMECC3
         bcs   +
         lda   #ID_MECC3
         sta   gMECCFastloadType
         jmp   foundmecc3
+        jsr   IDMECC4
         bcs   .notmecc
         lda   #ID_MECC4
         sta   gMECCFastloadType
         jmp   foundmecc4
.notmecc
;
; Try to identify DOS 3.3P (Special Delivery) bootloader.
; Exit via custom trace function if found.
;
         jsr   IDSpecDel
         bcs   +
         lda   #s_specdel
         jsr   PrintByID
         jmp   TraceSpecDel
;
; Try to identify Laureate Learning Systems bootloader.
; Exit via custom trace function if found.
;
+        jsr   IDLaureate
         bcs   +
         lda   #s_laureate
         jsr   PrintByID
         lda   #TRUE
         sta   gIsLaureate
         lda   #$0B
         jsr   PrereadT00Partial
         bcs   +
         jmp   TraceLaureate
;
; Try to identify Electronic Arts bootloader.
; Exit via custom trace function if found.
;
+        jsr   IDEA
         bcs   +
         jmp   foundea
;
; Try to identify Interplay bootloader.
; Exit via custom trace function if found.
;
+        jsr   IDAdvent
         bcs   +
         jmp   foundadvent
;
; Try to identify hybrid 16-/13-sector bootloader on
; DOS 3.2 disks.
; Exit via custom trace function if found.
;
+        jsr   IDDOS32
         bcs   +
         lda   #s_dos32b0
         jsr   PrintByID
         jmp   TraceDOS32
+        jsr   IDDOS32LO
         bcs   +
         lda   #s_dos32b0
         jsr   PrintByID
         jmp   TraceDOS32LO
;
; Try to detect whether there is code in the boot sector
; that loads 4-and-4-encoded data. This is an early escape
; hatch for disks that will fail later anyway.
;
+        jsr   IDEncoded44
         bcs   +
         lda   #s_encoded44
         jsr   PrintByID
         jmp   TheEnd
;
; Try to detect whether there is code in the boot sector
; that loads 5-and-3-encoded data. If the earlier DOS 3.2
; identification failed, we will have no way to read the disk
; (the universal RWTS only works on 6-and-2 encoded data), so
; this serves as an early escape hatch for disks that will
; fail later anyway.
;
+        jsr   IDEncoded53
         bcs   +
         lda   #s_encoded53
         jsr   PrintByID
         jmp   TheEnd
;
; ProDOS (all versions)
;
+        jsr   IDProDOS
         bcs   +
         lda   #s_prodosb0
         jsr   PrintByID
         lda   #TRUE
         sta   gIsProDOS
         jsr   IDVolumeName
         bcc   +
         jmp   UseUniversal
+
;
; Dinkey-DOS (ProDOS file structure with DOS 3.3-ish RWTS in language card)
; detectable now because IDVolumeName just read the first sector of the
; volume directory into memory so we can look for a unique filename
;
         jsr   IDDinkeyDOS
         bcc   +
         jmp   UseUniversal
+        lda   #s_dinkeydos
         jsr   PrintByID
         lda   #TRUE
         sta   gIsDinkeyDOS
         beq   .useuniv   ; always branches
;
; Apple Pascal (all versions)
;
+        jsr   IDPascal
         bcs   +
         lda   #s_pascalb0
         jsr   PrintByID
         lda   #TRUE
         sta   gIsPascal
         jsr   IDVolumeName
         bvc   .useuniv   ; always branches
;
; David-DOS II
;
+        jsr   IDDavid
         bcs   +
         lda   #s_daviddos
         jsr   PrintByID
         lda   #TRUE
         sta   gIsDavidDOS
         beq   .useuniv   ; always branches
;
; Encrypted Datasoft bootloader
;
+        jsr   IDDatasoft
         bcs   +
         lda   #s_datasoftb0
         jsr   PrintByID
         lda   #TRUE
         sta   gIsDatasoft
         beq   .useuniv   ; always branches
;
; Micrograms bootloader
; (just for display)
;
+        jsr   IDMicrograms
         bcs   +
         lda   #s_micrograms
         jsr   PrintByID
         bcc   .useuniv   ; always branches
;
; Quick-DOS
; (just for display)
;
+        jsr   IDQuickDOS
         bcs   +
         lda   #s_quickdos
         jsr   PrintByID
         bcc   .useuniv   ; always branches
;
; RDOS
; (just for display)
;
+        jsr   IDRDOS
         bcs   +
         lda   #s_rdos
         jsr   PrintByID
         bcc   .useuniv   ; always branches

;
; Dav Holle encrypted bootloader
; (will be decrypted and patched)
;
+        jsr   IDHolle
         bcs   +
         lda   #s_holle
         jsr   PrintByID
         lda   #TRUE
         sta   gIsHolle

+
.useuniv
         jmp   UseUniversal
}

!zone {
PrereadT00
         lda   #$0F
PrereadT00Partial
         sta   gSector
         clc
         adc   #BASEPAGE
         sta   gAddress+1
         lda   #$00
         sta   gTrack
         sta   gAddress
-        jsr   ReadSector
         bcs   .exit
         dec   gAddress+1
         dec   gSector
         bne   -
.exit
         rts
}

;-------------------------------
; IDBootFailure
; main entry point to identify the bootloader
; when the initial read failed
; identifies Infocom 18-sector side B disks
; and pure 13-sector disks
; doubles as Infocom verification routine after ID
; written by qkumba
;
; in:    nothing
; out:   carry set if we can't ID it
;-------------------------------
!zone {
IDBootFailure

VerifyInfocom18
         lda   $C0E9
.retry13
         ldx   #$1A       ; the length of a track
         ldy   #0

---      iny
         bne   +
         dex
         bne   +

.no      sec
         lda   $C0E8
         rts

.badsect
         lda   gIsInfocom18
         beq   .no        ; if in Infocom mode already then we have a true failure
         bne   .retry13   ; otherwise, try to identify 13-sector instead
                          ; the issue being that both have a D5 AA AD sequence

+
-        lda   $C0EC
         bpl   -
--       cmp   #$D5
         bne   ---
-        lda   $C0EC
         bpl   -
         cmp   #$AA
         bne   --
-        lda   $C0EC
         bpl   -
         cmp   #$B5      ; 13-sector only
         beq   .build13
         cmp   #$AD
         bne   --

-        lda   $C0EC
         bpl   -
         nop
         nop              ; ignore half of 4x4 track number
-        lda   $C0EC
         bpl   -          ; ignore half of 4x4 track number

         lda   #$12       ; all 18 sectors when in verify mode
         ldx   gIsInfocom18
         beq   .setcount
         lda   #$02       ; only two sectors when in ID mode
.setcount
         sta   tmp        ; sector counter

         lda   #$00
--       ldy   #$56
-        ldx   $C0EC
         bpl   -
         eor   $BA00,x    ; from universal RWTS
         dey
         bne   -
-        ldx   $C0EC
         bpl   -
         eor   $BA00,x    ; from universal RWTS
         iny
         bne   -
-        ldx   $C0EC
         bpl   -
         eor   $BA00,x    ; from universal RWTS
         bne   .badsect
         dec   tmp
         bne   --
         sta   gIsInfocom18

.checkmode
         bit   gMode      ; verify-mode already?
         bpl   +          ; yes, continue

         lda   #%00000000 ; 
         sta   gMode      ; no, switch to verify-mode
         lda   #s_toverify
         jsr   PrintByID  ; and say so

+        clc              ; all clear
         lda   $C0E8
         rts

         ;build 5-and-3 decoding table
         ;for 13-sector support

.build13
         ldx   #$00
         ldy   #$AB
-        tya
         sta   tmp
         lsr
         ora   tmp
         cmp   #$FF
         bne   +
         cpy   #$D5
         beq   +
         txa
         sta   $800,y
         inx
+        iny
         bne   -
         sty   gIs13Sector
         beq   .checkmode  ; always taken

read13
         lda   $C0E9
         lda   #$1C        ; retry count
         sta   tmp

.readaddr
         dec   tmp
         bmi   .badread2
         clc
         ldx   #$02       ; 512 nibbles
         ldy   #0

.readdata
         php
---      iny
         bne   +
         dex
         beq   .badread1
+
-        lda   $C0EC
         bpl   -
--       cmp   #$D5
         bne   ---
-        lda   $C0EC
         bpl   -
         cmp   #$AA
         bne   --
-        lda   $C0EC
         bpl   -
         cmp   #$B5
         bne   +
         ldy   #$03
--       lda   $C0EC
         bpl   --
         rol
         sta   $3C
-        lda   $C0EC
         bpl   -
         and   $3C
         dey
         bne   --
         plp
         cmp   gSector
         bne   .readaddr
         bcs   .readdata
+        plp
         bcc   .readaddr
         eor   #$AD
         bne   .readaddr
--       ldy   #$9A
-        ldx   $C0EC
         bpl   -
         eor   $800,x
         dey
         bne   -
-        ldx   $C0EC
         bpl   -
         eor   $800,x
         iny
         bne   -
-        ldx   $C0EC
         bpl   -
         eor   $800,x
         cmp   #$01       ; set carry if non-zero
         !byte $2c
.badread1
         plp
.badread2
         sec
         lda   $C0E8
         rts
}
